#!/usr/bin/env ruby
#
#  Created on 2008-8-25.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'punch'
require 'optparse'
require 'time'

Punch.load

commands = {
  'status' => lambda do |project|
    result = Punch.status(project, OPTIONS)
    if result.is_a?(Hash)
      puts result.to_yaml
    else
      puts result.inspect
    end
  end,
  'total'  => lambda do |project|
    result = Punch.total(project, OPTIONS.merge(:format => true))
    if result.is_a?(Hash)
      puts result.to_yaml
    else
      puts result.inspect
    end
  end,
  'in'     => lambda do |project|
    if project
      if Punch.in(project, OPTIONS)
        Punch.write
      else
        puts "Already punched in to '#{project}'"
      end
    else
      puts "Project required"
    end
  end,
  'delete' => lambda do |project|
    if project
      Punch.write if result = Punch.delete(project)
      puts result.inspect
    else
      puts "Project required"
    end
  end,
  'out' => lambda do |project|
    if Punch.out(project, OPTIONS)
      Punch.write
    else
      message = 'Already punched out of '
      message += project ? "'#{project}'" : 'all projects'
      puts message
    end
  end,
  'log' => lambda do |project|
    if project
      if message = OPTIONS.delete(:message) || ARGV[2]
        if Punch.log(project, message, OPTIONS)
          Punch.write
        else
          puts "Not punched in to '#{project}'"
        end
      else
        puts "Message required"
      end
    else
      puts "Project required"
    end
  end,
  'list' => lambda { |project|  puts Punch.list(project, OPTIONS).to_yaml },
  'summary' => lambda do |project|
    if project
      puts Punch.summary(project, OPTIONS.merge(:format => true)).to_yaml
    else
      puts "Project required"
    end
  end
}

OPTIONS = {}
MANDATORY_OPTIONS = %w[]

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
Usage: #{File.basename($0)} [command] <project>

Commands are:
    #{commands.keys.join("\n    ")}

Options are:
BANNER
  opts.separator ''
  opts.on('-v', '--version',
          "Show the #{File.basename($0)} version number and exit") { require 'punch/version'; puts "#{File.basename($0)} #{Punch::VERSION::STRING}"; exit  }
  opts.on('--after [TIME]', String,
          "Restrict command to only after the given time") { |time|  OPTIONS[:after] = Time.parse(time) }
  opts.on('--before [TIME]', String,
          "Restrict command to only before the given time") { |time|  OPTIONS[:before] = Time.parse(time) }
  opts.on('--at [TIME]', '--time [TIME]', String,
          "Use the given time") { |time|  OPTIONS[:time] = Time.parse(time) }
  opts.on('-m', '--message [MESSAGE]', String,
          "Use the given log message") { |message|  OPTIONS[:message] = message }
  opts.on('--full',
          "Show full output for the command") { |full|  OPTIONS[:full] = true }
  opts.on('--short',
          "Show short output for the command") { |full|  OPTIONS[:short] = true }
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

command = ARGV[0]

unless command
  puts "Usage: #{File.basename($0)} [command] <project>"
  exit
end

project = ARGV[1]


if command_code = commands[command]
  command_code.call(project)
else
  puts "Command '#{command}' unknown"
end
